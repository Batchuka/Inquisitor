# Tox configuration file
# Read more under https://tox.wiki/
# THIS SCRIPT IS SUPPOSED TO BE AN EXAMPLE. MODIFY IT ACCORDING TO YOUR NEEDS!

[tox]
minversion = 3.24
envlist = build, test, publish
isolated_build = True

[testenv]
allowlist_externals =
    aws


[testenv:dev]
description = Constroi ambiente de desenvolvimento
skip_install = True
deps =
passenv =
    HOME
    SETUPTOOLS_*
    AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY
commands =
    python -m venv {toxworkdir}/venv
    aws codeartifact login --tool pip --repository wmt-python-rpa-libraries --domain wmt-libraries --domain-owner 435062120355 --region us-east-1
    pip install -r requirements.txt



[testenv:build]
description = 
    Build do container a ser publicado no ECR. Aqui, construimos a imagem 
    que será utilizada para teste local e, em caso de sucesso, publicação 
    no ECR. Para viabilizar a entrega contínua, mantenha o padrão 
    IMAGE_TAG = 'v1.0.0/latest' use 'Semantic Versioning' na primeira tag e 
    'latest' na última.
setenv =
    TOXINIDIR = {toxinidir}
    IMAGE_TAG = v1.0.0/latest   # substitua conforme uso
    PROJECT_NAME = cookiecutter_template
passenv =
    HOME
    SETUPTOOLS_*
extras =
    testing
commands =
    pytest tests/
    pytest --docker tests/
    docker build -t {env:PROJECT_NAME}:{env:IMAGE_TAG} -f Dockerfile .



[testenv:test]
description = Executa os testes unitários do container que será publicado. O código deve 
              possuir os testes implementados com pytest, para que a imagem possa ser 
              chamada no Docker Desktop para teste.
setenv =
    TOXINIDIR = {toxinidir}
passenv =
    HOME
    SETUPTOOLS_*
extras =
    testing
commands =
    pytest --docker tests/


[testenv:publish]
description = 
    Publica a nova imagem do container no ECR seguindo o padrão 
    '<image-name>:<tag-version/latest>'
skip_install = True
changedir = {toxinidir}
passenv =
    # See: https://twine.readthedocs.io/en/latest/
    TWINE_USERNAME
    TWINE_PASSWORD
    TWINE_REPOSITORY
    TWINE_REPOSITORY_URL
deps = twine
commands =
    python -m twine check dist/*
    python -m twine upload {posargs:--repository {env:TWINE_REPOSITORY:testpypi}} dist/*
